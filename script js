// --- Grab all needed DOM elements once here ---
// These constants reference elements from the DOM.
// Declaring them once prevents redeclaration errors and improves readability.
const reviewModal = document.getElementById("reviewModal");
const reviewForm = document.getElementById("review-form");
const deleteReviewBtn = document.getElementById("delete-review-btn");
const reviewDestinationName = document.getElementById("review-destination-name");

const bookingForm = document.getElementById("tourForm");          // Booking form element
const deleteBookingBtn = document.getElementById("delete-booking-btn");  // Delete booking button

const descriptionModal = document.getElementById("descriptionModal");
const modalDestinationTitle = document.getElementById("modal-destination-title");
const modalDestinationDescription = document.getElementById("modal-destination-description");

const tourGuideCheckbox = document.getElementById('tourGuideCheckbox');  // Checkbox to add tour guide
const peopleInput = document.getElementById('people');                   // Number of people input
const priceInput = document.getElementById('price');                     // Total price input

// Arrays to hold fetched reviews and bookings data
let reviews = [];
let bookings = [];

// API endpoints
const REVIEWS_URL = "http://localhost:3000/reviews";
const BOOKINGS_URL = "http://localhost:3000/bookings";

// Variables to hold price info for calculation
let unitPrice = 0;
let guidePrice = 0;

// --- Fetch reviews and bookings from server and update arrays ---
function fetchReviewsAndBookings() {
  fetch(REVIEWS_URL)
    .then(res => res.json())
    .then(data => reviews = data);

  fetch(BOOKINGS_URL)
    .then(res => res.json())
    .then(data => bookings = data);
}

// Initial fetch on page load
fetchReviewsAndBookings();

// --- Show description modal with destination info and reviews ---
// Add click listeners to all destination cards
document.querySelectorAll(".destination").forEach(card => {
  card.addEventListener("click", e => {
    // Ignore clicks on booking or review buttons inside card
    if (e.target.classList.contains("booking") || e.target.classList.contains("user-review")) return;

    // Get title, description, and place identifier from the card
    const title = card.querySelector("p").innerText;
    const desc = card.dataset.description;
    const place = card.querySelector("button.booking").dataset.place;

    // Populate modal content
    modalDestinationTitle.textContent = title;
    modalDestinationDescription.innerHTML = `<p>${desc}</p>`;

    // Filter reviews for this destination
    const placeReviews = reviews.filter(r => r.destination === place);

    // Add reviews to modal or show placeholder text
    if (placeReviews.length > 0) {
      const reviewHTML = placeReviews.map(r =>
        `<div><strong>${r.name}</strong> (${r.rating}/5): ${r.text}</div>`
      ).join("<hr>");
      modalDestinationDescription.innerHTML += `<h4>What others say:</h4>${reviewHTML}`;
    } else {
      modalDestinationDescription.innerHTML += `<p><em>No reviews yet for this destination.</em></p>`;
    }

    // Show the description modal
    descriptionModal.style.display = "block";
  });
});

// Close description modal on close button click
document.querySelector(".close-button").onclick = () => descriptionModal.style.display = "none";

// --- Review modal logic ---

// When a "Review Us" button is clicked
document.querySelectorAll(".user-review").forEach(btn => {
  btn.addEventListener("click", () => {
    const place = btn.dataset.place;
    // Check if user already has a review for this destination
    const existing = reviews.find(r => r.destination === place);

    reviewDestinationName.textContent = place;
    reviewForm.reset(); // Clear form fields
    deleteReviewBtn.style.display = existing ? "inline-block" : "none"; // Show delete button if existing

    // If existing review found, prefill form fields for editing
    if (existing) {
      document.getElementById("review-id").value = existing.id;
      document.getElementById("reviewerName").value = existing.name;
      document.getElementById("reviewText").value = existing.text;
      document.getElementById("reviewRating").value = existing.rating;
    } else {
      document.getElementById("review-id").value = "";
    }

    // Show the review modal
    reviewModal.style.display = "block";
  });
});

// Close review modal on close button click
document.querySelector(".close-review-modal").onclick = () => reviewModal.style.display = "none";

// Handle review form submission for create or update
reviewForm.addEventListener("submit", e => {
  e.preventDefault();

  const id = document.getElementById("review-id").value;
  const name = document.getElementById("reviewerName").value || "Anonymous";
  const text = document.getElementById("reviewText").value;
  const rating = document.getElementById("reviewRating").value;
  const destination = reviewDestinationName.textContent;

  const payload = { name, text, rating, destination };

  if (id) {
    // Update existing review via PATCH
    fetch(`${REVIEWS_URL}/${id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    }).then(() => {
      alert("Review updated!");
      reviewModal.style.display = "none";
      fetchReviewsAndBookings(); // Refresh data
    });
  } else {
    // Create new review via POST
    fetch(REVIEWS_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    }).then(() => {
      alert("Review submitted!");
      reviewModal.style.display = "none";
      fetchReviewsAndBookings(); // Refresh data
    });
  }
});

// Handle review deletion
deleteReviewBtn.addEventListener("click", () => {
  const id = document.getElementById("review-id").value;
  if (id) {
    fetch(`${REVIEWS_URL}/${id}`, {
      method: "DELETE"
    }).then(() => {
      alert("Review deleted!");
      reviewModal.style.display = "none";
      fetchReviewsAndBookings(); // Refresh data
    });
  }
});

// --- Booking modal logic ---

// Add click listeners to all booking buttons on destination cards
document.querySelectorAll(".booking").forEach(btn => {
  btn.addEventListener("click", () => {
    const place = btn.dataset.place;
    unitPrice = parseFloat(btn.dataset.price);
    guidePrice = parseFloat(btn.dataset.guidePrice) || 0; // Guide price may be missing

    bookingForm.reset(); // Clear form inputs

    // Prefill destination and default people count
    document.getElementById("destination").value = place;
    peopleInput.value = 1;

    // Reset tour guide checkbox on new booking
    tourGuideCheckbox.checked = false;

    updatePrice();

    // Hide delete booking button initially (assume new booking)
    deleteBookingBtn.style.display = "none";

    // If an existing booking exists for this destination, prefill the form
    const existing = bookings.find(b => b.destination === place);
    if (existing) {
      document.getElementById("name").value = existing.name;
      document.getElementById("email").value = existing.email;
      document.getElementById("date").value = existing.date;
      peopleInput.value = existing.people;

      // Set tour guide checkbox from existing booking data
      tourGuideCheckbox.checked = !!existing.tourGuide;

      updatePrice();

      deleteBookingBtn.dataset.id = existing.id; // Store booking id on delete button
      deleteBookingBtn.style.display = "inline-block";
    }

    // Show the booking form container
    document.getElementById("tour-booking-container").style.display = "block";
    // Scroll booking form into view
    document.getElementById("tour-booking-container").scrollIntoView({ behavior: "smooth" });
  });
});

// Calculate and update total price based on people and guide checkbox
function updatePrice() {
  const people = parseInt(peopleInput.value) || 1;
  let totalPrice = unitPrice * people;

  if (tourGuideCheckbox.checked) {
    totalPrice += guidePrice; // Add guide price once
  }

  priceInput.value = totalPrice.toFixed(2);
}

// Recalculate price on user input changes
peopleInput.addEventListener("input", updatePrice);
tourGuideCheckbox.addEventListener("change", updatePrice);

// Handle booking form submission (create or update)
bookingForm.addEventListener("submit", e => {
  e.preventDefault();

  const name = document.getElementById("name").value;
  const email = document.getElementById("email").value;
  const destination = document.getElementById("destination").value;
  const date = document.getElementById("date").value;
  const people = parseInt(peopleInput.value);
  const price = parseFloat(priceInput.value);
  const tourGuide = tourGuideCheckbox.checked;

  // Payload includes tourGuide checkbox state
  const payload = { name, email, destination, date, people, price, tourGuide };

  // Check if booking exists for same user and destination
  const existing = bookings.find(b => b.name === name && b.destination === destination);

  if (existing) {
    // Update existing booking
    fetch(`${BOOKINGS_URL}/${existing.id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    }).then(() => {
      alert("Booking updated!");
      fetchReviewsAndBookings(); // Refresh data
    });
  } else {
    // Create new booking
    fetch(BOOKINGS_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    }).then(() => {
      alert("Booking created!");
      fetchReviewsAndBookings(); // Refresh data
    });
  }
});
